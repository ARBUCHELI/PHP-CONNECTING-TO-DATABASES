# CONNECTING TO DATABASES
-------------------------

* Introduction
--------------
In our previous lesson, we looked at how to handle user input from forms. Combining PHP with a database will let us store the user input to use in our applications. In this lesson, we 
will learn how to use PostgreSQL to store large amounts of structured data and perform complex operations.

Let’s take a look at how we will structure our application. We will use PHP to:

Process information
Apply business logic
Communicate with customers, vendors, and services
Tell the database which operations to perform and when
We will connect a PostgreSQL database to:

Store data
Read, write, update, and delete data when PHP instructs it
There are several ways to connect PHP to a database. In this lesson, we will be using PDO (PHP Data Objects). PDO comes out of the box with all supported PHP versions. It provides a layer 
of abstraction that lets us write code for many popular database systems such as PostgreSQL, MySQL, MariaDB, and SQLite.

Once we connect PHP to PostgreSQL, we’ll learn how to interact with the database securely, identify and fix insecure statements, and catch errors during our program’s execution.

Let’s get started with learning how to combine PHP with PostgreSQL to create powerful and dynamic user experiences!

index.php
---------
<?php

// Set the database name
$dbname = 'ccuser';

// Our database is hosted on the same machine as PHP so we'll use localhost
$hostname = '/tmp';

// Create the DSN (data source name) by combining the database type (PostgreSQL), hostname and dbname
$dsn = "pgsql:host=$hostname;dbname=$dbname";

// Set the username and password with permissions to the database
$username = 'ccuser';
$password = 'pass';

// Handle exceptions gracefully
try {
    //  Setup a connection by creating a database object
    $db = new PDO($dsn, $username, $password);

    // Query to SELECT the title of all books in the books table
    $bookQuery = $db->query('SELECT title FROM books');
    // Fetch just the next row
    $book = $bookQuery->fetch(PDO::FETCH_ASSOC);
    echo "Fetch first book:\n";
    print_r($book);
    // Fetch all rows
    $books = $bookQuery->fetchAll(PDO::FETCH_ASSOC);
    echo "Fetch all books:\n";
    print_r($books);

    // Create a prepared statement to find a book by ID
    $id = 2;
    // Prepare the query with :id as a placeholder
    $bookQuery = $db->prepare('SELECT * FROM books WHERE id = :id');
    // Map placeholder :id to variable $id
    $bookQuery->execute(['id' => $id]);
    // Fetch the book
    $book = $bookQuery->fetch(PDO::FETCH_ASSOC);
    echo "Fetch the book with id of 2:\n";
    print_r($book);

    // Find and return all books by Jane Austen
    $author = 'Jane Austen';

    $booksQuery = $db->prepare('SELECT * FROM books WHERE author = :author');
    $booksQuery->execute(['author' => $author]);
    $books = $booksQuery->fetchAll(PDO::FETCH_ASSOC);
    echo "Fetch all books written by Jane Austen:\n";
    print_r($books);

    // Insert a new book into the database using a prepared statement
    $title = 'Invisible Man';
    $author = 'Ralph Ellison';
    $year = 1953;
    
    $newBookQuery = $db->prepare('INSERT INTO books (title, author, year) VALUES (:title, :author, :year)');
    $newBookQuery->execute(['title' => $title, 'author' => $author, 'year' => $year]);

    // Update an existing book in the database
    $author = 'Charles Dickens';
    $title = 'David Copperfield';
    $year = 1850;

    $updateBookQuery = $db->prepare('UPDATE books SET title = :title, year = :year WHERE author = :author'); 
    $updateBookQuery->execute(['title' => $title, 'year' => $year, 'author' => $author]);

    // Delete a book from the database
    $id = 1;
    
    $deleteBookQuery = $db->prepare('DELETE FROM books WHERE id = :id');
    $deleteBookQuery->execute(['id' => $id]);

    // To close the database connection, we must set all queries to null
    $bookQuery = null;
    $booksQuery = null;
    $newBookQuery = null;
    $updateBookQuery = null;

    // Finally, setting the connection to null will close it
    $db = null;

} catch (\Exception $e) {
    // If an error is thrown, catch it, echo the message, then exit
    echo $e->getMessage();
    exit();
}

db.sql
------
DROP TABLE IF EXISTS books;
CREATE TABLE books (
	id serial PRIMARY KEY,
	title VARCHAR (255) NOT NULL,
	author VARCHAR (255),
	year INT
);

INSERT INTO books (title, author, year) 
VALUES 
('Don Quixote', 'Miguel de Cervantes', 1605),
('Robinson Crusoe', 'Daniel Defoe', 1719),
('Pride and Prejudice', 'Jane Austen', 1813),
('Emma', 'Jane Austen', 1816),
('A Tale of Two Cities', 'Charles Dickens', 1859);

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Connecting to the Database
----------------------------
When working with databases, you may have used a graphical tool such as Postbird, PgAdmin, or PhpMyAdmin. These tools are clients, which create a connection to the database server and 
send commands to it.

Similarly, we will be setting up PHP to act as a client which will send queries to PostgreSQL.

To connect to a server, a client needs to know where it is. We provide this information in the form of a DSN (data source name), which holds our database type (PostgreSQL), hostname, and 
database name. The hostname contains the location of the database. If PostgreSQL is running on the same host (computer) as PHP, we use localhost. If it’s running on a remote server, we 
use its IP address or domain name. For Codecademy’s environment, we will use /tmp.

// Assign variables for the hostname and database name
$hostname = '/tmp';
$dbname = 'ccuser';

// Create the DSN (data source name)
$dsn = "pgsql:host=$hostname;dbname=$dbname";

The first part of the DSN is the prefix, where we specify which database system to use. For PostgreSQL, that is pgsql. Then we add a colon, followed by a key/value pair containing the 
hostname and database name, separated by a semi-colon. The DSN uses a precise format, so it’s important not to include spaces or extra characters.

We’ll also need to store the username and password of an account with the correct permissions for the database.

$username = 'ccuser';
$password = 'pass';

We’ll start the connection by creating a database object from the PDO class and instantiating it using the new keyword. The PDO constructor takes the $dsn, $username, and $password 
variables as its arguments in that order. If the connection is successful, the database object will be assigned to $db.

$db = new PDO($dsn, $username, $password);

After we complete our database operations, we will end the connection by setting the database object and any of its references to null. We can do this with:

$db = null;

index.php
---------
<?php

// Set the hostname as '/tmp'
$hostname = '/tmp';
// Set the database name as 'ccuser'
$dbname = 'ccuser';
// Set the username and password with permissions to the database
$username = 'ccuser';
$password = 'pass';

// Create the DSN (data source name) by combining the database type (PostgreSQL), hostname and dbname
$dsn = "pgsql:host=$hostname;dbname=$dbname";
// Create a PDO object
$db = new PDO($dsn, $username, $password);
// Terminate db connection
$db = null;

------------------------------------------------------------------------------------------------------------------------------------------------------------------


