# CONNECTING TO DATABASES
-------------------------

* Introduction
--------------
In our previous lesson, we looked at how to handle user input from forms. Combining PHP with a database will let us store the user input to use in our applications. In this lesson, we 
will learn how to use PostgreSQL to store large amounts of structured data and perform complex operations.

Let’s take a look at how we will structure our application. We will use PHP to:

Process information
Apply business logic
Communicate with customers, vendors, and services
Tell the database which operations to perform and when
We will connect a PostgreSQL database to

Store data
Read, write, update, and delete data when PHP instructs it
There are several ways to connect PHP to a database. In this lesson, we will be using PDO (PHP Data Objects). PDO comes out of the box with all supported PHP versions. It provides a layer 
of abstraction that lets us write code for many popular database systems such as PostgreSQL, MySQL, MariaDB, and SQLite.

Once we connect PHP to PostgreSQL, we’ll learn how to interact with the database securely, identify and fix insecure statements, and catch errors during our program’s execution.

Let’s get started with learning how to combine PHP with PostgreSQL to create powerful and dynamic user experiences!

index.php
---------
<?php

// Set the database name
$dbname = 'ccuser';

// Our database is hosted on the same machine as PHP so we'll use localhost
$hostname = '/tmp';

// Create the DSN (data source name) by combining the database type (PostgreSQL), hostname and dbname
$dsn = "pgsql:host=$hostname;dbname=$dbname";

// Set the username and password with permissions to the database
$username = 'ccuser';
$password = 'pass';

// Handle exceptions gracefully
try {
    //  Setup a connection by creating a database object
    $db = new PDO($dsn, $username, $password);

    // Query to SELECT the title of all books in the books table
    $bookQuery = $db->query('SELECT title FROM books');
    // Fetch just the next row
    $book = $bookQuery->fetch(PDO::FETCH_ASSOC);
    echo "Fetch first book:\n";
    print_r($book);
    // Fetch all rows
    $books = $bookQuery->fetchAll(PDO::FETCH_ASSOC);
    echo "Fetch all books:\n";
    print_r($books);

    // Create a prepared statement to find a book by ID
    $id = 2;
    // Prepare the query with :id as a placeholder
    $bookQuery = $db->prepare('SELECT * FROM books WHERE id = :id');
    // Map placeholder :id to variable $id
    $bookQuery->execute(['id' => $id]);
    // Fetch the book
    $book = $bookQuery->fetch(PDO::FETCH_ASSOC);
    echo "Fetch the book with id of 2:\n";
    print_r($book);

    // Find and return all books by Jane Austen
    $author = 'Jane Austen';

    $booksQuery = $db->prepare('SELECT * FROM books WHERE author = :author');
    $booksQuery->execute(['author' => $author]);
    $books = $booksQuery->fetchAll(PDO::FETCH_ASSOC);
    echo "Fetch all books written by Jane Austen:\n";
    print_r($books);

    // Insert a new book into the database using a prepared statement
    $title = 'Invisible Man';
    $author = 'Ralph Ellison';
    $year = 1953;
    
    $newBookQuery = $db->prepare('INSERT INTO books (title, author, year) VALUES (:title, :author, :year)');
    $newBookQuery->execute(['title' => $title, 'author' => $author, 'year' => $year]);

    // Update an existing book in the database
    $author = 'Charles Dickens';
    $title = 'David Copperfield';
    $year = 1850;

    $updateBookQuery = $db->prepare('UPDATE books SET title = :title, year = :year WHERE author = :author'); 
    $updateBookQuery->execute(['title' => $title, 'year' => $year, 'author' => $author]);

    // Delete a book from the database
    $id = 1;
    
    $deleteBookQuery = $db->prepare('DELETE FROM books WHERE id = :id');
    $deleteBookQuery->execute(['id' => $id]);

    // To close the database connection, we must set all queries to null
    $bookQuery = null;
    $booksQuery = null;
    $newBookQuery = null;
    $updateBookQuery = null;

    // Finally, setting the connection to null will close it
    $db = null;

} catch (\Exception $e) {
    // If an error is thrown, catch it, echo the message, then exit
    echo $e->getMessage();
    exit();
}

db.sql
------
DROP TABLE IF EXISTS books;
CREATE TABLE books (
	id serial PRIMARY KEY,
	title VARCHAR (255) NOT NULL,
	author VARCHAR (255),
	year INT
);

INSERT INTO books (title, author, year) 
VALUES 
('Don Quixote', 'Miguel de Cervantes', 1605),
('Robinson Crusoe', 'Daniel Defoe', 1719),
('Pride and Prejudice', 'Jane Austen', 1813),
('Emma', 'Jane Austen', 1816),
('A Tale of Two Cities', 'Charles Dickens', 1859);

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Connecting to the Database
----------------------------
When working with databases, you may have used a graphical tool such as Postbird, PgAdmin, or PhpMyAdmin. These tools are clients, which create a connection to the database server and 
send commands to it.

Similarly, we will be setting up PHP to act as a client which will send queries to PostgreSQL.

To connect to a server, a client needs to know where it is. We provide this information in the form of a DSN (data source name), which holds our database type (PostgreSQL), hostname, and 
database name. The hostname contains the location of the database. If PostgreSQL is running on the same host (computer) as PHP, we use localhost. If it’s running on a remote server, we 
use its IP address or domain name. For Codecademy’s environment, we will use /tmp.

// Assign variables for the hostname and database name
$hostname = '/tmp';
$dbname = 'ccuser';

// Create the DSN (data source name)
$dsn = "pgsql:host=$hostname;dbname=$dbname";

The first part of the DSN is the prefix, where we specify which database system to use. For PostgreSQL, that is pgsql. Then we add a colon, followed by a key/value pair containing the 
hostname and database name, separated by a semi-colon. The DSN uses a precise format, so it’s important not to include spaces or extra characters.

We’ll also need to store the username and password of an account with the correct permissions for the database.

$username = 'ccuser';
$password = 'pass';

We’ll start the connection by creating a database object from the PDO class and instantiating it using the new keyword. The PDO constructor takes the $dsn, $username, and $password 
variables as its arguments in that order. If the connection is successful, the database object will be assigned to $db.

$db = new PDO($dsn, $username, $password);

After we complete our database operations, we will end the connection by setting the database object and any of its references to null. We can do this with:

$db = null;

index.php
---------
<?php

// Set the hostname as '/tmp'
$hostname = '/tmp';
// Set the database name as 'ccuser'
$dbname = 'ccuser';
// Set the username and password with permissions to the database
$username = 'ccuser';
$password = 'pass';

// Create the DSN (data source name) by combining the database type (PostgreSQL), hostname and dbname
$dsn = "pgsql:host=$hostname;dbname=$dbname";
// Create a PDO object
$db = new PDO($dsn, $username, $password);
// Terminate db connection
$db = null;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating Queries
------------------
Now that we’ve created a database object, $db, we can call its methods to fetch data from the database.

Let’s take a look at an example database. It contains a books table with a list of books with their id, title, author, and published year.

id	title	author	year
1	Don Quixote	Miguel de Cervantes	1605
2	Robinson Crusoe	Daniel Defoe	1719
3	Pride and Prejudice	Jane Austen	1813
4	Emma	Jane Austen	1816
5	A Tale of Two Cities	Charles Dickens	1859

We’ll begin with a query to fetch book titles. We’ll use the query() method on the $db object to create and execute the query. We can do this by referencing the $db object with the object 
operator (->) before calling the query() method.

// Create the query
$bookQuery = $db->query('SELECT title FROM books');

Does the syntax in parenthesis look familiar? That’s because it’s a regular SQL query that is understood by the database.

Now let’s fetch the result of the query and assign it to the $book variable. We do this by calling the fetch() method on $bookQuery.

// Fetch the first book and assign it to $book 
$book = $bookQuery->fetch(); 

Although our SELECT statement above queries the database for all book titles, the fetch() method returns only one result.

To return a list of all book titles, we can use the fetchAll() method instead:

// Fetch all books and assign them to $books
$books = $bookQuery->fetchAll(); 

If we use print_r to look at the value of $book, we’ll see that the data is returned as both an ordered (indexed) and associative array.

Array ( [title] => Don Quixote [0] => Don Quixote )

We can change that by setting a fetch mode, which tells PDO in what format to return our data. To get our book as an associative array, we pass PDO::FETCH_ASSOC as an argument to the 
fetch() method.

// Fetch the next row and assign the result to $book
$book = $bookQuery->fetch(PDO::FETCH_ASSOC);

If we check $book now, we’ll see:

Array ( [title] => Don Quixote )

index.php
---------
<?php 

// Database setup:
$hostname = '/tmp';
$dbname = 'ccuser';
$username = 'ccuser';
$password = 'pass';
$dsn = "pgsql:host=$hostname;dbname=$dbname";
$db = new PDO($dsn, $username, $password);

// Create a query to get the id, title, and author, and assign it to $booksQuery
$bookQuery = $db->query('SELECT id, title, author FROM books');

// Fetch one book using the fetch() method and assign it to the $book variable.
$book = $bookQuery->fetch(PDO::FETCH_ASSOC);

// Fetch all books using the fetchAll() method and assign the result to the $books variable.
$books = $bookQuery->fetchAll(PDO::FETCH_ASSOC);

// Loop over the $books array and echo the title of each book, followed by a line break.
foreach($books as $book) {
  echo $book['title'] . "\n";
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* SQL Injection
---------------
Although we can use PHP to send SQL queries to PostgreSQL, sometimes SQL queries can be dangerous.

For example, how would we write a query that lets a user get a book’s details by providing its ID?

// Get the ID from the frontend
$id = $_POST['id'];

// Like this?
$booksQuery = $db->query('SELECT * FROM books WHERE id = ' . $id);

But what if instead of entering a number, a malicious user enters 1 or 1 = 1?

Then the database will run this query:

$booksQuery = $db->query('SELECT * FROM books WHERE id = 1 or 1 = 1');

And since 1 = 1 is always true, the database will return every row from the books table. While returning all books might not be a big problem, an attacker can use the same technique to 
return a list of all users, passwords, and other confidential information!

SQL injection happens when a malicious user provides a SQL command instead of data, and the database executes it. We can prevent SQL injection by telling the database which values should 
be treated only as data.

We do that with prepared statements.

A prepared statement is a pre-defined template containing SQL and optionally placeholders. We use placeholders to tell the database where to place the data we will provide when executing 
the statement.

We create prepared statements using the $db object’s prepare() method. And instead of appending the $id variable, we use the placeholder :id .

// Get the ID from the frontend
$id = $_POST['id'];

// Create a prepared statement
$bookQuery = $db->prepare('SELECT * FROM books WHERE id = :id');

The next step is to run the execute() method, and pass in an array with a key-value pair which maps our placeholders to variables.

// Map :id to $id
$bookQuery->execute(['id' => $id]);

The final step is to fetch the result:

$book = $bookQuery->fetch(PDO::FETCH_ASSOC);

index.php
---------
<?php
// Database & variables setup
require 'setup.php';

// Set the $id variable
$id = $_POST['id'];
// Unsafe statement to get user by id
$userQuery = $db->query('SELECT * FROM users WHERE id = ' . $id);
// Write an equivalent prepared statement here
$userQuery = $db->prepare('SELECT * FROM users WHERE id = :id');
// Execute the statement here
$userQuery->execute(['id' => $id]);
// Fetch user
$user = $userQuery->fetch(PDO::FETCH_ASSOC);

// Sanitize $id here
$id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);

// Fetch all books written by Jane Austen
$author = 'Jane Austen';
// Place your SELECT statement here
$bookQuery = $db->prepare('SELECT * FROM books WHERE author = :author');
// Execute it here
$bookQuery->execute(['author' => $author]);
// Fetch the result and assign it to $books
$books = $bookQuery->fetchAll(PDO::FETCH_ASSOC);

// Add this book to the database
$title = 'Invisible Man';
$author = 'Ralph Ellison';
$year = 1953;
// Place your INSERT statement here
$newBookQuery = $db->prepare('INSERT INTO books (title, author, year) VALUES (:title, :author, :year)');
// Execute it here
$newBookQuery->execute(['title' => $title, 'author' => $author, 'year' => $year]);

// Find the book by Charles Dickens and update its title and year to the values below
$author = 'Charles Dickens';
$title = 'David Copperfield';
$year = 1850;
// Place your UPDATE statement here
$updateBookQuery = $db->prepare('UPDATE books SET title = :title, year = :year WHERE author = :author');
// Execute it here
$updateBookQuery->execute(['title' => $title, 'year' => $year, 'author' => $author]);

// Delete the book with this id from the database
$id = 1;
// Place your DELETE statement here
$deleteBookQuery = $db->prepare('DELETE FROM books WHERE id = :id');
// Execute it here
$deleteBookQuery->execute(['id' => $id]);

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
Great job on completing this lesson. Let’s take a moment to review some of the material covered in this lesson:

	. Databases store data for PHP applications.

	. PDO lets us write code that will work with many common database systems.

	. We write queries by inserting SQL into the query() method.

	. SQL queries with user-defined parameters (variables) are vulnerable to SQL injection.

	. We use prepared statements to prevent SQL injection.

	. Prepared statements use the prepare() and execute() methods and send SQL commands and data separately.

	. For exception handling, we wrap code in a try/catch block.

	. We use exception handling to catch and handle exceptions when our program throws them.

	. We can use methods on the exception object to troubleshoot exceptions.

You’re now well on your way to creating database-driven PHP applications!

index.php
---------
<?php

// Set the database name
$dbname = 'ccuser';

// Our database is hosted on the same machine as PHP so we'll use localhost
$hostname = '/tmp';

// Create the DSN (data source name) by combining the database type (PostgreSQL), hostname and dbname
$dsn = "pgsql:host=$hostname;dbname=$dbname";

// Set the username and password with permissions to the database
$username = 'ccuser';
$password = 'pass';

// Handle exceptions gracefully
try {
    //  Setup a connection by creating a database object
    $db = new PDO($dsn, $username, $password);

    // Query to SELECT the title of all books in the books table
    $bookQuery = $db->query('SELECT title FROM books');
    // Fetch just the next row
    $book = $bookQuery->fetch(PDO::FETCH_ASSOC);
    echo "Fetch first book:\n";
    print_r($book);
    // Fetch all rows
    $books = $bookQuery->fetchAll(PDO::FETCH_ASSOC);
    echo "Fetch all books:\n";
    print_r($books);

    // Create a prepared statement to find a book by ID
    $id = 2;
    // Prepare the query with :id as a placeholder
    $bookQuery = $db->prepare('SELECT * FROM books WHERE id = :id');
    // Map placeholder :id to variable $id
    $bookQuery->execute(['id' => $id]);
    // Fetch the book
    $book = $bookQuery->fetch(PDO::FETCH_ASSOC);
    echo "Fetch the book with id of 2:\n";
    print_r($book);

    // Find and return all books by Jane Austen
    $author = 'Jane Austen';

    $booksQuery = $db->prepare('SELECT * FROM books WHERE author = :author');
    $booksQuery->execute(['author' => $author]);
    $books = $booksQuery->fetchAll(PDO::FETCH_ASSOC);
    echo "Fetch all books written by Jane Austen:\n";
    print_r($books);

    // Insert a new book into the database using a prepared statement
    $title = 'Invisible Man';
    $author = 'Ralph Ellison';
    $year = 1953;
    
    $newBookQuery = $db->prepare('INSERT INTO books (title, author, year) VALUES (:title, :author, :year)');
    $newBookQuery->execute(['title' => $title, 'author' => $author, 'year' => $year]);

    // Update an existing book in the database
    $author = 'Charles Dickens';
    $title = 'David Copperfield';
    $year = 1850;

    $updateBookQuery = $db->prepare('UPDATE books SET title = :title, year = :year WHERE author = :author'); 
    $updateBookQuery->execute(['title' => $title, 'year' => $year, 'author' => $author]);

    // Delete a book from the database
    $id = 1;
    
    $deleteBookQuery = $db->prepare('DELETE FROM books WHERE id = :id');
    $deleteBookQuery->execute(['id' => $id]);

    // To close the database connection, we must set all queries to null
    $bookQuery = null;
    $booksQuery = null;
    $newBookQuery = null;
    $updateBookQuery = null;

    // Finally, setting the connection to null will close it
    $db = null;

} catch (\Exception $e) {
    // If an error is thrown, catch it, echo the message, then exit
    echo $e->getMessage();
    exit();
}






















